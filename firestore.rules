/**
 * @fileoverview Firestore Security Rules for TempoAI application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data stored
 * in Firestore.  Each user has exclusive access to their own data, and
 * no user can access or modify data belonging to another user.
 *
 * Data Structure:
 * All data is nested under the `/users/{userId}` path. This includes:
 * - User profile information
 * - Workout schedules
 * - Workouts
 * - Exercises
 * - AI Chatbot messages
 * - Live workout sessions
 * - Progress tracking data
 *
 * Key Security Decisions:
 * - All write operations require the user to be authenticated.
 * - All data is owned by the user, eliminating the need for complex `get()` calls in security rules.
 * - Listing other users' data is explicitly denied.
 * - Profile pictures are stored as URL strings directly inside the UserProfile entity.
 *
 * Denormalization for Authorization:
 * The data structure uses path-based authorization where the `userId` is embedded in the path.
 * This approach avoids the need for `get()` calls to determine ownership,
 * as the rules can directly verify that the `request.auth.uid` matches the `userId`
 * in the path.  This makes the rules simpler, faster, and more secure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}/profile
     * @allow (create) - Authenticated user with matching userId creates their profile.
     * @allow (get, update, delete) - Authenticated user with matching userId accesses their profile.
     * @deny (create) - Authenticated user attempts to create a profile with a mismatched userId.
     * @deny (get, update, delete) - Authenticated user attempts to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/profile {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for workout schedules.
     * @path /users/{userId}/workoutSchedules/{workoutScheduleId}
     * @allow (create) - Authenticated user with matching userId creates a workout schedule.
     * @allow (get, list, update, delete) - Authenticated user with matching userId accesses their workout schedules.
     * @deny (create) - Authenticated user attempts to create a workout schedule with a mismatched userId.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's workout schedules.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/workoutSchedules/{workoutScheduleId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for workouts.
     * @path /users/{userId}/workouts/{workoutId}
     * @allow (create) - Authenticated user with matching userId creates a workout.
     * @allow (get, list, update, delete) - Authenticated user with matching userId accesses their workouts.
     * @deny (create) - Authenticated user attempts to create a workout with a mismatched userId.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's workouts.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/workouts/{workoutId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for exercises.
     * @path /users/{userId}/exercises/{exerciseId}
     * @allow (create) - Authenticated user with matching userId creates an exercise.
     * @allow (get, list, update, delete) - Authenticated user with matching userId accesses their exercises.
     * @deny (create) - Authenticated user attempts to create an exercise with a mismatched userId.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's exercises.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/exercises/{exerciseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for AI Chatbot messages.
     * @path /users/{userId}/aiChatbotMessages/{aiChatbotMessageId}
     * @allow (create) - Authenticated user with matching userId creates an AI Chatbot message.
     * @allow (get, list, update, delete) - Authenticated user with matching userId accesses their AI Chatbot messages.
     * @deny (create) - Authenticated user attempts to create an AI Chatbot message with a mismatched userId.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's AI Chatbot messages.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/aiChatbotMessages/{aiChatbotMessageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for live workout sessions.
     * @path /users/{userId}/liveWorkoutSessions/{liveWorkoutSessionId}
     * @allow (create) - Authenticated user with matching userId creates a live workout session.
     * @allow (get, list, update, delete) - Authenticated user with matching userId accesses their live workout sessions.
     * @deny (create) - Authenticated user attempts to create a live workout session with a mismatched userId.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's live workout sessions.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/liveWorkoutSessions/{liveWorkoutSessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for progress tracking data.
     * @path /users/{userId}/progressTracking/{progressTrackingId}
     * @allow (create) - Authenticated user with matching userId creates progress tracking data.
     * @allow (get, list, update, delete) - Authenticated user with matching userId accesses their progress tracking data.
     * @deny (create) - Authenticated user attempts to create progress tracking data with a mismatched userId.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's progress tracking data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/progressTracking/{progressTrackingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }
  }
}